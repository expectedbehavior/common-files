#!/bin/bash

if [[ "$BASH_EXECUTION_STRING" == "" ]]; then
   # This won't exit, we'll be in a new shell
   /Users/jason/Dropbox/personal/scripts/terminal_save/logged_shell
fi

if [[ "$SKIP_KEYCHAIN" != "true" ]]; then
  for k in /usr/bin/keychain /opt/local/bin/keychain /usr/local/bin/keychain /opt/boxen/homebrew/bin/keychain; do
    if [ -f $k ]; then
      # Adding the gpg key happens automatically in general because the password
      # is probably in the OSX keychain. If not, it should prompt with
      # pinentry-mac in a separate dialog. In both cases we only need to start
      # the gpg agent and add the key in one terminal, so we lock.
      if my_lock /tmp/keychain_got_gpg_start_lock; then
        # Use `gpg --gen-key` to create a key if you don't have one. Then you can
        # use `gpg --list-keys` to get the key id which will look something like
        # this: `pub   4096R/92D9B4C3 ...`, the id being right after the slash.
        eval `$k --lockwait 15 --eval --agents ssh,gpg --inherit any 92D9B4C3`

        # Let all processes know that the gpg agent is started and the key added
        touch /tmp/keychain_gpg_key_added
      fi
    fi
  done

  # Wait for the agent to start since that may have happened in another terminal
  while ! test -e /tmp/keychain_gpg_key_added; do
    sleep 1
  done

  # Load the ssh and gpg agent environment variables. This is basically what
  # "eval `keychain --eval`" does, but this is much more performant than
  # actually running keychain (keychain does expensive checks to look for
  # running agents).
  [ -z "$HOSTNAME" ] && HOSTNAME=`uname -n`
  [ -f $HOME/.keychain/$HOSTNAME-sh ] && \
          . $HOME/.keychain/$HOSTNAME-sh
  [ -f $HOME/.keychain/$HOSTNAME-sh-gpg ] && \
          . $HOME/.keychain/$HOSTNAME-sh-gpg

  # Secrets can be made using a command like this:
  # cat | gpg --encrypt --recipient 92D9B4C3 > ~/Dropbox/secrets/HOMEBREW_GITHUB_API_TOKEN
  # then type whatever you want, hit enter at the end, and then hit ctrl-d to finish.
  export HOMEBREW_GITHUB_API_TOKEN="`cat ~/Dropbox/secrets/HOMEBREW_GITHUB_API_TOKEN | gpg --decrypt --quiet --batch`"
  export GIT_AUTHOR_EMAIL="`cat ~/Dropbox/secrets/GIT_AUTHOR_EMAIL | gpg --decrypt --quiet --batch`"
  export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
fi

# Adding this so `git config --get user.email`.chomp works on deploys
export PATH="${HOME}/.common_files/bin:${PATH}"
