#+TITLE: Expected Behavior Emacs Configuration
#+AUTHOR: Matthew Gordon
#+EMAIL: matt@expectedbehavior.com
#+OPTIONS: num:nil

* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

#+begin_src emacs-lisp

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

#+end_src

* Keep .emacs.d Clean

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

#+begin_src emacs-lisp

;; Keep transient cruft out of ~/.emacs.d/
(setq user-emacs-directory "~/.cache/emacs/"
      backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
      url-history-file (expand-file-name "url/history" user-emacs-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
      projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)

#+end_src

* Emacs Package Management
** Force TLS 1.3
If emacs is compiled with GnuTLS, you can fail to install packages. 
You can avoid the issue by advising it to use TLS 1.3
More info 
https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341
https://github.com/syl20bnr/spacemacs/issues/12535

#+BEGIN_SRC emacs-lisp

(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

#+END_SRC

** Add Melpa as a package repo
Melpa is the big package repo that nearly /everything/ can be
found. It's a must for emacs configs.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(unless package--initialized (package-initialize t))

#+END_SRC

** Install use-package
use-package handles automatically installing and loading packages as they're referenced

#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t) ; always try to install missing packages
#+END_SRC

* Core Setup
** Basic Stuff
*** Better Defaults Package
Contains many near-universal config improvements. NOTE: It does override some keybindings that we'll want to re-bind later.
https://github.com/technomancy/better-defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults
    :ensure t)
#+END_SRC
*** Default screen should be Ruby scratch buffer
Remove splash screen and use *scratch* instead as the home buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil
      initial-major-mode 'ruby-mode
)
#+END_SRC

*** Emacs Backup Files Go In Tmp
Funnel all the auto backup files to one location.
Despite years of reading that Emacs tmp files will save my bacon one day, it has yet to happen. They can all hang out in tmp.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "/tmp")))
#+END_SRC

*** Line numbers should always be on
Switch line numbers on by default in all buffers
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
#+END_SRC

*** Disable Menu Bar
Switch the Menubar off by default. I have never used it.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** Disable Scroll Bar
Remove Scroll Bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** Disable Tool Bar
Remove Tool Bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** Disable visual bell
# TODO - this doesn't seem to disable the bell anymore
The visual bell shows up on your screen as a yellow triangle with an exclamation mark in it.
I don't need to see it. I already know I'm mashing ctrl-g more than necessary.
#+BEGIN_SRC 
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC
*** Show tool tips in echo area
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)
#+END_SRC

*** Smooth Scrolling
Smooth Scrolling 
#TODO this is not as smooth as I would have hoped.
#+BEGIN_SRC emacs-lisp
(use-package smooth-scroll
    :ensure t)
#+END_SRC
*** Command is Meta Key on OSX
#+BEGIN_SRC  emacs-lisp
  (setq mac-option-key-is-meta nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC

*** Enable deleting selected text
By default, text under the region won't be deleted if you type or paste. I find this infuriating.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
*** Start Emacs server
I use this to make sure git commits are written in my main emacs instance instead of starting another.
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
*** Quickly go to a line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-g") 'goto-line)
#+END_SRC
*** Quick access to files and projects
These are files I want access to almost all the time, regardless of what project I'm working on.
It might be better to use registers, but I haven't read about how those work yet
See
https://stackoverflow.com/questions/12558019/shortcut-to-open-a-specific-file-in-emacs
https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html
TODO: Project navigation should depend on a function that determines where your code lives
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c t") (lambda() (interactive)(find-file "~/Dropbox/tmp.txt")))
(global-set-key (kbd "C-c p i w") (lambda() (interactive)(find-file "~/code/instrumental/web/README.md")))
(global-set-key (kbd "C-c p d w") (lambda() (interactive)(find-file "~/code/docraptor/web/README.md")))
#+END_SRC

*** Quickly Switch Buffers
I often find myself switching back and forth between a few
buffers. Let's set some shortcut keys to make that better.
TODO: Org mode overides M-} so you'll get stuck if you hit an org file like this one
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-{"))
(global-unset-key (kbd "M-}"))
(global-set-key (kbd "M-{") 'switch-to-prev-buffer)
(global-set-key (kbd "M-}") 'switch-to-next-buffer)
  ;; (global-set-key (kbd "C-{") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
  ;; (global-set-key (kbd "C-}") (lambda() (interactive)(find-file "~/Dropbox/tmp.txt")))
#+END_SRC

** Themes
*** Load manual install theme dir
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+END_SRC
*** Install Themes from Repos
List of themes to install
#+BEGIN_SRC emacs-lisp
  (use-package monokai-alt-theme
    :ensure t
    :defer t)
  (use-package gruvbox-theme
    :ensure t
    :defer t)
  (use-package darkokai-theme
    :ensure t
    :defer t)
  (use-package darktooth-theme
    :ensure t
    :defer t)
  (use-package creamsody-theme
    :ensure t
    :defer t)
  (use-package github-theme
    :ensure t
    :defer t)
  (use-package melancholy-theme
    :ensure t
    :defer t)
  (use-package darkburn-theme
    :ensure t
    :defer t)
  (use-package kaolin-themes
    :ensure t
    :defer t)
  (use-package dracula-theme
    :ensure t
    :defer t)
  (use-package darkokai-theme
    :ensure t
    :defer t)
(use-package monokai-alt-theme
    :ensure t
    :defer t)
#+END_SRC

*** Load Current default theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai-alt t)
#+END_SRC

** Fonts
Set default font
#+BEGIN_SRC emacs-lisp
  (set-default-font "PT Mono-15")
#+END_SRC

** Window Management
*** Switch-Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :bind
    (("M-o"    . (lambda() (interactive) (other-window -1)))
     ("C-x O"  . (lambda() (interactive) (switch-window)))
     ("M-p"    . (lambda() (interactive) (other-window 1)))
     ("C-x \\" . (lambda() (interactive) (other-frame 1)))
    )
  )
#+END_SRC




** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :defer 2
    :bind
    ("M-x" . helm-M-x)
    ("C-x C-f" . helm-find-files)
    ("M-y" . helm-show-kill-ring)
    ("C-x b" . helm-mini)
    :config
    (require 'helm-config)
    (helm-mode 1)
    (setq helm-split-window-inside-p t ;; don't split frame, just current buffer
      helm-move-to-line-cycle-in-source t) ;; circular scolling
    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20) ;; helm shouldn't take more than 20% of the screen
    (helm-autoresize-mode 1)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z TODO - this actually minimizes on OSX, why?
    )
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :bind
    (("C-c p f" . helm-projectile-find-file)
     ("C-c p p" . helm-projectile-switch-project)
     ("C-x p"   . projectile-find-file) ;; switch projects quickly
     ("C-c p s" . projectile-save-project-buffers))
    :config
    (projectile-mode +1)
  )

  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on))
#+END_SRC

** Dash
#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :ensure t
    :bind
    (("C-c d" . dash-at-point)
     )
  )
#+END_SRC
* Ideas For Later
# javasceript
# (setq js-indent-level 2)

# whitespace
# ;;(setq tab-width 4)

# ;; Death To Autofill
# (auto-fill-mode -1)
# (remove-hook 'text-mode-hook 'turn-on-auto-fill)
** add a place to quickly install new syntax languages/highlighterse

* Load Personal Configuration
This file just contains the Expected Behavior defaults.  If you want
something that's not good for the gander, put it in a file named
`username.config.org` and that will be loaded here.

#+BEGIN_SRC emacs-lisp
(message "Loading personal emacs config")
(if (file-exists-p (format "~/.emacs.d/%s.config.org" (user-login-name)))
  (org-babel-load-file (format "~/.emacs.d/%s.config.org" (user-login-name)))
  (display-message-or-buffer "No personal configuration found")
)
#+END_SRC


