#+TITLE: Expected Behavior Emacs Configuration
#+AUTHOR: Matthew Gordon
#+EMAIL: matt@expectedbehavior.com
#+OPTIONS: num:nil


* About
This is the Expected Behavior Emacs configuation. It's intended to be
used by the Emacsers of EB, but it should be a good starting place for
anyone. The goals for this config are

1. Automatic Setup
There should be no need to install any external library or file to use
this config. As long as you're using a version of Emacs that's
compatible with this library, everything you need should be installed
automatically on startup.

2. Well Documented
Each configuration should be explained. Anyone reading the config
should understand what is being configured, why it is being
configured, and (where necessary) why it is in that particular place
in the config file.

3. Easy To Update
If there's something you need this file doesn't provide, it should be
easy to add it immediately.

4. Thorough
We support many languages at EB.  This file should cover the common
use cases for all common languages and editing paradigms.

5. Personalizable
If your desired behavior is not a good default, it should be easy to
add customizations that apply only to you while continuing to use the
rest of this file.

* Global

This section should contain changes that apply to all modes or all but
a few blacklisted modes. If you find yourself writing code for just
one mode or a whitelist of modes, it belongs in Per-Mode.

** Startup Performance

Make startup faster by reducing the frequency of garbage collection
and then use a hook to measure Emacs startup time. 

#+begin_src emacs-lisp

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

#+end_src
** Keep .emacs.d Clean

Emacs has many backup systems to prevent you from losing the things
you're working on. I very rarely need them and they tend to clutter up
the emacs directory, so let's put them some place out of the
way. They'll still be there in the rare case we need them, but we
won't have to look at them.

#+begin_src emacs-lisp

;; Keep transient cruft out of ~/.emacs.d/
(setq user-emacs-directory "~/.cache/emacs/"
      backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory)))
      url-history-file (expand-file-name "url/history" user-emacs-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-emacs-directory)
      projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)

#+end_src

** Emacs Package Management
*** Force TLS 1.3
If emacs is compiled with GnuTLS, you can fail to install packages. 
You can avoid the issue by advising it to use TLS 1.3
More info 
https://debbugs.gnu.org/cgi/bugreport.cgi?bug=34341
https://github.com/syl20bnr/spacemacs/issues/12535

#+BEGIN_SRC emacs-lisp

(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

#+END_SRC

*** Add Melpa as a package repo
Melpa is the big package repo that nearly /everything/ can be
found. 

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(unless package--initialized (package-initialize t))

#+END_SRC

*** Install use-package
The use-package package handles automatically installing and loading
packages as they're referenced. It's a key part of the Automatic Setup
goal. Consider [[https://ianyepan.github.io/posts/setting-up-use-package/][this brief tutorial]].

#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

; always try to install missing packages
(setq use-package-always-ensure t) 
#+END_SRC

** Start Emacs Server

Start the Emacs server from this instance so that all =emacsclient=
calls are routed here. This ensures you can write your git commits
without having to start a new Emacs instance each time, amongst other
uses.

#+begin_src emacs-lisp

(server-start)

#+end_src

** Core Setup
** Emacs UI
*** Disable Startup Message
By default, Emacs provides a welcome message intended to help new
users get started. This config isn't intended for brand new users that
are looking for a place to start and there are more valuable things we
can see on startup, so we're going to suppress it.
https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

*** Enable Visual Bell
By default, Emacs will beep at you when there's an error
(e.g. attempting to autocomplete something with no valid
completions). It's very irritating, so this switches to a simple flash
when an error occurs.

#+begin_src emacs-lisp

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

*** Remove menu, scroll, toolbar, toolips
Some people like using these to interact with Emacs, but we prefer to
use the keyboard. These elements are all for the mouse, so we disable
them and clean up the interface a bit.
#+begin_src emacs-lisp
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (menu-bar-mode -1)          ; Disable the menu bar
#+end_src

*** Increase fringe size
The fringe is the small parts to the left and right of the buffer
where information appears. The most common one is a line continuation,
but many modes make use of it. The default is 8px, but we like it just
a little larger to give some more room around the symbols.
https://emacsredux.com/blog/2015/01/18/customizing-the-fringes/
#+begin_src emacs-lisp
  (set-fringe-mode 10)
#+end_src

*** Improve scrolling.

#+begin_src emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a timesetq use-dialog-box nil) ; Disable dialog boxes since they weren't working in Mac OSX

#+end_src

*** Maximize windows by default

#+begin_src emacs-lisp

    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

*** Enable line numbers and customize their format.

#+begin_src emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  erc-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  neotree-mode-hook
                  telega-chat-mode-hook
                  telega-root-mode-hook
                  telega-webpage-mode-hook
                  dashboard-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

*** Don't warn for large files (shows up when launching videos)

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)

#+end_src

*** Don't warn for following symlinked files

#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)

#+end_src

*** Don't warn when advice is added for functions

#+begin_src emacs-lisp

  (setq ad-redefinition-action 'accept)

#+end_src

** Basic Stuff
*** Better Defaults Package
Contains many near-universal config improvements. NOTE: It does override some keybindings that we'll want to re-bind later.
https://github.com/technomancy/better-defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults)
#+END_SRC
*** Default screen should be Ruby scratch buffer
Remove splash screen and use *scratch* instead as the home buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil
      initial-major-mode 'ruby-mode
)
#+END_SRC

*** Emacs Backup Files Go In Tmp
Funnel all the auto backup files to one location.
Despite years of reading that Emacs tmp files will save my bacon one day, it has yet to happen. They can all hang out in tmp.
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "/tmp")))
#+END_SRC

*** Disable Menu Bar
Switch the Menubar off by default. I have never used it.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

*** Disable Scroll Bar
Remove Scroll Bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** Disable Tool Bar
Remove Tool Bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** Disable visual bell
# TODO - this doesn't seem to disable the bell anymore
The visual bell shows up on your screen as a yellow triangle with an exclamation mark in it.
I don't need to see it. I already know I'm mashing ctrl-g more than necessary.
#+BEGIN_SRC 
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC
*** Show tool tips in echo area
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)
#+END_SRC

*** Smooth Scrolling
Smooth Scrolling 
#TODO this is not as smooth as I would have hoped.
#+BEGIN_SRC emacs-lisp
(use-package smooth-scroll)
#+END_SRC
*** Command is Meta Key on OSX
#+BEGIN_SRC  emacs-lisp
  (setq mac-option-key-is-meta nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC

*** Enable deleting selected text
By default, text under the region won't be deleted if you type or paste. I find this infuriating.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
*** Quickly go to a line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-g") 'goto-line)
#+END_SRC
*** Quick access to files and projects
These are files I want access to almost all the time, regardless of what project I'm working on.
It might be better to use registers, but I haven't read about how those work yet
See
https://stackoverflow.com/questions/12558019/shortcut-to-open-a-specific-file-in-emacs
https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html
TODO: Project navigation should depend on a function that determines where your code lives
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c t") (lambda() (interactive)(find-file "~/Dropbox/tmp.org")))
(global-set-key (kbd "C-c p i w") (lambda() (interactive)(find-file "~/code/instrumental/web/README.md")))
(global-set-key (kbd "C-c p d w") (lambda() (interactive)(find-file "~/code/docraptor/web/README.md")))
#+END_SRC

*** Quickly Switch Buffers
I often find myself switching back and forth between a few
buffers. Let's set some shortcut keys to make that better.
TODO: Org mode overides M-} so you'll get stuck if you hit an org file like this one
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "M-{"))
(global-unset-key (kbd "M-}"))
(global-set-key (kbd "M-{") 'switch-to-prev-buffer)
(global-set-key (kbd "M-}") 'switch-to-next-buffer)
  ;; (global-set-key (kbd "C-{") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
  ;; (global-set-key (kbd "C-}") (lambda() (interactive)(find-file "~/Dropbox/tmp.txt")))
#+END_SRC

** Themes
*** Load manual install theme dir
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+END_SRC
*** Install Themes from Repos
List of themes to install
#+BEGIN_SRC emacs-lisp
  (use-package monokai-alt-theme
    :defer t)
  (use-package gruvbox-theme
    :defer t)
  (use-package darkokai-theme
    :defer t)
  (use-package darktooth-theme
    :defer t)
  (use-package creamsody-theme
    :defer t)
  (use-package github-theme
    :defer t)
  (use-package darkburn-theme
    :defer t)
  (use-package kaolin-themes
    :defer t)
  (use-package dracula-theme
    :defer t)
  (use-package darkokai-theme
    :defer t)
(use-package monokai-alt-theme
    :defer t)
#+END_SRC

*** Load Current default theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai-alt t)
#+END_SRC

** Fonts
Set the default font. You can install the font with
brew cask install font-fira-code
brew cask install font-fira-mono
#+BEGIN_SRC emacs-lisp
    (use-package font-utils)

    ;; Alternative fonts, here for consideration. Should be moved to
    ;; a suggested customization file.
    ;; (if (font-utils-exists-p "Fira Mono")
    ;;   (set-face-attribute 'default nil :font "Fira Mono" :height 150)
    ;; )
    ;;
    ;; This one should be updated to the conditional syntax before
    ;; being used
    ;; (set-face-attribute 'default nil :font "PT Mono-15" :height 170)
    ;; (set-default-font "PT Mono-15")

    (if (font-utils-exists-p "Fira Code")
      (set-face-attribute 'default nil :font "Fira Code" :height 150 :family "Retina")
    )
#+END_SRC

** Window Management
*** Switch-Window

#+BEGIN_SRC emacs-lisp

  (use-package switch-window
    :bind
    (("M-o"    . (lambda() (interactive) (other-window -1)))
     ("C-x O"  . (lambda() (interactive) (switch-window)))
     ("M-p"    . (lambda() (interactive) (other-window 1)))
     ("C-x \\" . (lambda() (interactive) (other-frame 1)))
    )
  )

#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :defer 2
    :bind
    ("M-x" . helm-M-x)
    ("C-x C-f" . helm-find-files)
    ("M-y" . helm-show-kill-ring)
    ("C-x b" . helm-mini)
    :config
    (require 'helm-config)
    (helm-mode 1)
    (setq helm-split-window-inside-p t ;; don't split frame, just current buffer
      helm-move-to-line-cycle-in-source t) ;; circular scolling
    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20) ;; helm shouldn't take more than 20% of the screen
    (helm-autoresize-mode 1)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z TODO - this actually minimizes on OSX, why?
    )
#+END_SRC

** Ag - The Silver Searcher
If you want to use Projectile's search functions with ag

(use-package ag)

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :bind
    (("C-c p f" . helm-projectile-find-file)
     ("C-c p p" . helm-projectile-switch-project)
     ("C-x p"   . projectile-find-file) ;; switch projects quickly
     ("C-c p s" . projectile-save-project-buffers))
    :config
    (projectile-mode +1)
  )

  (use-package helm-projectile
    :config
    (helm-projectile-on))
#+END_SRC

** Dash
#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :bind
    (("C-c d" . dash-at-point)
     )
  )
#+END_SRC
** Doom Mode Line
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+END_SRC

** Ensure Emacs Environment Variables Match User Shell
Depending on how you start Emacs, it may or may not have the same
environment variables as your normal shell environment. Some packages
depend on having access to shell commands or other environment
variables and it can be a very non-obvious kind of failure.

In specific, this was installed in response to the
[[https://www.reddit.com/r/emacs/comments/sjstjx/how_can_i_get_orgroam_unlinked_references_working/][problem I was having with org-roam not displaying unlinked references.]]
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init (exec-path-from-shell-initialize))
#+END_SRC

#+RESULTS:

* Per-Mode

This section should contain changes that apply to just one mode or a
few whitelisted modes. If you find yourself writing code that just
blacklists a few modes, it belongs in Global.

** Coffee

#+BEGIN_SRC emacs-lisp

  (use-package coffee-mode
    :custom (coffee-tab-width 2))
  
#+END_SRC

** Cucumber

#+BEGIN_SRC emacs-lisp

  (use-package pickle
    :init (pickle-config))
  
#+END_SRC

** Javascript

#+BEGIN_SRC emacs-lisp

  (setq js-indent-level 2)

#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp

  (add-hook 'org-mode-hook 'auto-fill-mode)

  (let ((current-prefix-arg '(4)))
      (setq org-startup-with-inline-images t))

#+END_SRC

** Org Roam
Org Roam is a text based information management system using the
Zettelkasten Method. If you haven't heard of it, think of it as a
personal wiki with tags that tracks and graphs links between
nodes. That's really underselling it.

If you'd like to learn more, [[https://www.youtube.com/watch?v=AyhPmypHDEw&list=PLEoMzSkcN8oN3x3XaZQ-AXFKv52LZzjqD][System Crafters did a YouTube series]] that
starts with the absolute basics and builds from there. You could
always read the [[https://www.orgroam.com/manual.html][Org Roam Manual]], but it's a bit more of a technical
review and less of a user guide.

#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t -*-  


  ;; If you're going to make files, they're going to need a directory.
  ;; I chose a Dropbox folder as the default because it means your
  ;; files will be backed up as soon as you start working on it.
  ;; TODO: Dry up the directory. It's in three places, which is bad.
  (if (file-exists-p (file-truename "~/Dropbox/OrgRoam"))
    (display-message-or-buffer "Org Roam directory already exists")
    (make-directory "~/Dropbox/OrgRoam")
  )

  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/Dropbox/OrgRoam"))
    (org-roam-completion-everywhere t)
    (org-roam-mode-section-functions
     (list #'org-roam-backlinks-section
           #'org-roam-reflinks-section
           #'org-roam-unlinked-references-section
           ))
    :bind (
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n l" . org-roam-buffer-toggle)
           ("C-c n s" . org-roam-db-sync) ;; in case you delete a file outside emacs
           ("C-c n t" . org-roam-tag-add)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           )
    :config
    (org-roam-setup)
    (org-roam-db-autosync-mode)
  )

  (defun eb/org-roam-change-directory (directory)
    (interactive (list 1))
    (setq org-roam-directory directory)
    (org-roam-db-sync)
  )

#+END_SRC


#+BEGIN_SRC emacs-lisp

  ;; https://github.com/org-roam/org-roam-ui
  ;; localhost:35901
  ;; 
  (use-package org-roam-ui
    :after org-roam ;; or :after org
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+END_SRC


** Rust

#+BEGIN_SRC emacs-lisp

  (use-package rust-mode)

#+END_SRC

** Scala

#+BEGIN_SRC emacs-lisp

  (use-package scala-mode)


#+END_SRC

** Terraform

#+BEGIN_SRC emacs-lisp

  (use-package terraform-mode)

#+END_SRC

* Your Personal Configuration (always at the bottom!)
The above configuration represents good defaults.  If you want
something that's not a good default for most Behaviornauts, put it in a
file named `username.config.org` and that will be loaded here. If you
work for Expected Behavior (or have write access to this repo), please
check your personal customizations in! It's good to see what other
people are doing with their editor.

#+BEGIN_SRC emacs-lisp
(message "Loading personal emacs config")
(if (file-exists-p (format "~/.emacs.d/%s.config.org" (user-login-name)))
  (org-babel-load-file (format "~/.emacs.d/%s.config.org" (user-login-name)))
  (display-message-or-buffer "No personal configuration found")
)
#+END_SRC
